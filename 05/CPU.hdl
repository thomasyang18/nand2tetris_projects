// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
/**
 * PSEUDOCODE
 * If (instruction[15] == 0)
 * 	Load instruction[0..14] into A
 *      addressM = A
 *      outM =  
 *
 * If (instruction[15] == 1)
 * 	If instruction[12] == 0 (the "a" bit), use A in operations, otherwise use M in operations. 
 * 	It looks like from the table, the expression is D [fxn] [insert value] when inputting to ALU, with control bits mapped [6..11] ofc
 *      d3 = whether M is stored, d2 = whether D is stored, d1 = whether A is stored
 *      
 *      Jump just means whether you set A = PCCounter or not (imo Hack would be nicer if uncondtiion was 000, saying you need "no conditions"
 *      to jump and null was 111, you need "every condition" which impossible)
 * 
 *      It appears that JMP is (j1 == ng) AND (j2 == zr) AND (j3 == not ng)
 *     	Except when AND(j1, j2, j3) == 1  
 *      
 *      Mux that with reset, if reset == 1 pick PC = 0 else pick PC = whatever
 */

    Not(in=instruction[15], out=not15);
   
    And(a=not15, b=instruction[5],out=loadA);

    // A register
    Register(in = ALUout, load=loadA, out=A);
    Register(in = ALUout, load=instruction[4], out=D); // instruction 4 is loadD

    Mux(a=A, b=inM, sel=instruction[12], out=opVal);

    ALU(x=D, y=opVal, zx=instruction[11], nz=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zr, ng=ng);

    // instruction[3] is writeM
    And(a=true, b=instruction[3], out=writeM);
    And16(a=true, b=ALUout, out=outM);
    
	
    Not(in=ng, out=NOTng);


}
