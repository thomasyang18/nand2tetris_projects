// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=load, sel=address[14],
    a=load0, b=load1);

    RAM16K(in=in, load=load0, address=address[0..13], out=out0);

    Not(in=address[13], out=NOTaddr13);

    And(a=load1, b=NOTaddr13, out = screenLoad); 

    Screen(in=in, load=screenLoad, address=address[0..12], out=out1);

    // If addr[14] is 0, lower 16k bits
    // If addr[14] is 1, it's a screen bit. 
    // If addr[13] is also 1, it's a keyboard bit.
   // Need a 3 way muxing thing 

    Mux16(a = out0, b = out1, sel=address[14], out=tempout);
	
    Keyboard(out=keyOut);

    And(a=address[13], b=address[14], out=keyLoad);

    Mux16(a = tempout, b = keyOut, sel = keyLoad, out=out);     
}
